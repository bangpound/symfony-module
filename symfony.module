<?php
/**
 * @file
 * Symfony Drupal integration module.
 */

/**
 * Implements hook_form_FORMID_alter().
 */
function symfony_form_user_login_block_alter(&$form, &$form_state) {
  $csrf_token_manager = $GLOBALS['service_container']->get('security.csrf.token_manager');
  $form['#submit'] = array();
  $form['#action'] = $GLOBALS['service_container']->get('router')->generate('user/login');
  $form['_csrf_token'] = array(
    '#type' => 'hidden',
    '#value' => $csrf_token_manager->getToken('authenticate')->getValue(),
  );
}

/**
 * Implements hook_form_FORMID_alter().
 */
function symfony_form_user_login_alter(&$form, &$form_state) {
  $csrf_token_manager = $GLOBALS['service_container']->get('security.csrf.token_manager');
  $form['#submit'] = array();
  $form['#action'] = $GLOBALS['service_container']->get('router')->generate('user/login');
  $form['_csrf_token'] = array(
    '#type' => 'hidden',
    '#value' => $csrf_token_manager->getToken('authenticate')->getValue(),
  );
}

/**
 * Implements hook_watchdog().
 */
function symfony_watchdog(array $log_entry) {

  // In some cases, services have not been instantiated. This is a clumsy
  // way to prevent fatal errors, but it also stops Drupal watchdog logging.
  if (!isset($GLOBALS['service_container'])) {
    return;
  }

  /** @var \Psr\Log\LoggerInterface $logger */
  $logger = $GLOBALS['service_container']->get('logger');
  $log_level_map = array(
    WATCHDOG_EMERGENCY => \Psr\Log\LogLevel::EMERGENCY,
    WATCHDOG_ALERT => \Psr\Log\LogLevel::ALERT,
    WATCHDOG_CRITICAL => \Psr\Log\LogLevel::CRITICAL,
    WATCHDOG_ERROR => \Psr\Log\LogLevel::ERROR,
    WATCHDOG_WARNING => \Psr\Log\LogLevel::WARNING,
    WATCHDOG_NOTICE => \Psr\Log\LogLevel::NOTICE,
    WATCHDOG_INFO => \Psr\Log\LogLevel::INFO,
    WATCHDOG_DEBUG => \Psr\Log\LogLevel::DEBUG,
  );
  $level = $log_level_map[$log_entry['severity']];
  $message = is_array($log_entry['variables']) ?
    strtr($log_entry['message'], $log_entry['variables']) : $log_entry['message'];
  $logger->log($level, $message, $log_entry);
}

/**
 * Implements hook_form_FORMID_alter().
 */
function symfony_form_system_performance_settings_alter(&$form, &$form_state) {
  // Force the page cache to always be disabled and this setting to be
  // inaccessible.
  $form['caching']['cache']['#access'] = FALSE;
  $form['caching']['cache']['#value'] = FALSE;
}

/**
 * Implements hook_flush_caches().
 *
 * This hook is designed to tell Drupal which additional cache bins should be
 * flushed when the Drupal cache is cleared, but instead this function attaches
 * a listener to the shutdown event which runs a Symfony Command to clear
 * the application cache.
 */
function symfony_flush_caches() {
  // In some cases, services have not been instantiated. This is a clumsy
  // way to prevent fatal errors, but it also stops Drupal watchdog logging.
  if (!isset($GLOBALS['service_container'])) {
    return;
  }

  /** @var \Symfony\Component\HttpKernel\Kernel $kernel */
  $kernel = $GLOBALS['service_container']->get('kernel');

  /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher */
  $dispatcher = $GLOBALS['service_container']->get('event_dispatcher');

  $listener = function (\Symfony\Component\HttpKernel\Event\PostResponseEvent $event) use ($kernel) {
    $app_dir = $kernel->getRootDir();
    $cmd = 'cache:clear --no-warmup';
    $timeout = 300;

    $php_finder = new \Symfony\Component\Process\PhpExecutableFinder();
    if (!$php_path = $php_finder->find()) {
      throw new \RuntimeException('The php executable could not be found, add it to your PATH environment variable and try again');
    }

    $console = escapeshellarg($app_dir . '/console');

    $process = new \Symfony\Component\Process\Process($php_path . ' ' . $console . ' ' . $cmd, NULL, NULL, NULL, $timeout);
    $process->run(function ($type, $buffer) { drupal_set_message(check_plain($buffer)); });
    if (!$process->isSuccessful()) {
      throw new \RuntimeException(sprintf('An error occurred when executing the "%s" command.', escapeshellarg($cmd)));
    }
  };

  $dispatcher->addListener(\Symfony\Component\HttpKernel\KernelEvents::TERMINATE, $listener);

  // Return something redundant so that this function has only intended
  // side effects.
  return array('cache');
}

/**
 * Implements hook_system_info_alter().
 */
function symfony_system_info_alter(&$info, $file, $type) {
  if ($type == 'module' && $file->name == 'openid') {
    $info['hidden'] = TRUE;
    $info['dependencies'][] = '_missing_dependency';
    unset($info['core']);
  }
}
